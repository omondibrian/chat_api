{"version":3,"sources":["../../src/controller/chats.controller.js"],"names":["getChats","req","res","_id","user","Chat","find","$or","receipentId","SenderId","chats","json","status","message","makeNewChat","image","file","path","error","chat","text","body","imageUrl","save","savedchat","send","chatId","getSingleChat","params","id","findOne","deleteSingleChat","findOneAndRemove","useFindAndModify","deleteSingleConversation","deleteMany","$and","likeChat","findById","isLiked","updateOne","$set","Error","markAsRead","isRead","getNewChats","console","log"],"mappings":"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","sourcesContent":["/**\n * @fileOverview  the chatsController contains the functions needed\n * to manege all the chats\n * @author brian omondi\n * @version 0.0.1\n */\n\nimport Chat from \"../models/chats.models\";\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to fetch a list of chats\n * @example  'using this url' -> host:4000/api/chats/\n *\n */\nexport async function getChats(req, res) {\n  const { _id } = req.user;\n  try {\n    const chats = await Chat.find({\n      $or: [{ receipentId: _id }, { SenderId: _id }]\n    });\n    res\n      .json({\n        chats,\n        user: req.user\n      })\n      .status(200);\n  } catch (error) {\n    res.status(400).json({ message: error });\n  }\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to create new chat\n * @example  'using this url' -> host:3000/api/chats/\n * and passing {\n *                  \"text\": <text> ,\n *                  \"receipentId\":<receipentId> ,\n *             }\n */\n\nexport async function makeNewChat(req, res) {\n  let image = \"\";\n  try {\n    req.file.path ? (image = req.file.path) : null;\n  } catch (error) {\n    image = \"\";\n  }\n\n  //create a new chat\n  const chat = new Chat({\n    text: req.body.text,\n    SenderId: req.user._id,\n    receipentId: req.body.receipentId,\n    imageUrl: image\n  });\n  try {\n    //save the chat\n    const savedchat = await chat.save();\n    res.status(200).send({ chatId: savedchat._id });\n  } catch (error) {\n    //catch errors if any\n    res.status(400).send(error);\n  }\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to fetch single chat\n * @example  'using this url' -> host:3000/api/chats/:id\n */\nexport async function getSingleChat(req, res) {\n  const chatId = req.params.id;\n  const chats = await Chat.findOne({ _id: chatId });\n  res\n    .json({\n      chats: chats,\n      user: req.user\n    })\n    .status(200);\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to delete single chat\n * @example  'using this url' -> host:3000/api/chats/:id\n */\nexport async function deleteSingleChat(req, res) {\n  const chatId = req.params.id;\n  const chats = await Chat.findOneAndRemove(\n    { _id: chatId },\n    { useFindAndModify: false }\n  );\n  res\n    .json({\n      chats: chats,\n      user: req.user\n    })\n    .status(200);\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to delete single conversation between the user and the receiver\n * @example  'using this url' -> host:4000/api/chats/conv/\n */\nexport async function deleteSingleConversation(req, res) {\n  const chats = await Chat.deleteMany(\n    {\n      $and: [\n        { SenderId: req.body.SenderId },\n        { receipentId: req.body.receipentId }\n      ]\n    },\n    { useFindAndModify: false }\n  );\n  res\n    .json({\n      chats: chats,\n      user: req.user\n    })\n    .status(200);\n}\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to like single chat between the user and the receiver\n * @example  'using this url' -> host:4000/api/chats/likeChat/\n */\nexport async function likeChat(req, res) {\n  const { _id } = req.body;\n\n  try {\n    const chat = await Chat.findById({ _id: _id });\n\n    const { isLiked } = chat;\n    await Chat.updateOne({ _id: _id }, { $set: { isLiked: !isLiked } });\n    res.json({ message: \"chat updated successfully\" }).status(200);\n  } catch (error) {\n    res.send(new Error(\"error performing operation\"));\n  }\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @description used to mark chat between the user and the receiver as read\n * @example  'using this url' -> host:4000/api/chats/marlAsRead/\n */\nexport async function markAsRead(req, res) {\n  const { _id } = req.body;\n  try {\n    await Chat.updateOne({ _id: _id }, { $set: { isRead: true } });\n    res.json({ message: \"chat updated successfully\" }).status(200);\n  } catch (error) {\n    res.send(new Error(\"error performing operation\"));\n  }\n}\n\nexport async function getNewChats(_id) {\n  try {\n    const chats = await Chat.find({});\n    console.log(\"chatscontroller\", chats);\n    return chats;\n  } catch (error) {\n    throw new Error(\"unable to get new chats\");\n  }\n}\n"],"file":"chats.controller.js"}