{"version":3,"sources":["../../src/controller/auth.controller.js"],"names":["process","env","SECREATE_TOKEN","minioBucket","projection","password","dateOfRegistration","contacts","blockedContacts","register_user","req","res","body","error","send","details","message","status","User","findOne","email","emailExists","bcrypt","hash","encrptedPass","secreateToken","file","console","log","minio","putObject","originalname","buffer","image","encodeURIComponent","user","name","profileImage","save","token","log_in_user","compare","validPass","_id","header","json","getUsers","next","find","$in","userIds","users","getUser","findById","params","id","singleUser","changeUserProfile","salt","updateOne","$set","path","updatedProfile","forgotPass","genSalt","html","searchFriends","result","addContact","updateUserContact","userId","Error","newContact","uniqueContacts","Array","from","Set","userDetails","blockContact"],"mappings":"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","sourcesContent":["/**\n * @fileOverview contains the various functions to manage the users route.\n * @author Brian omondi\n * @version 0.0.1\n */\nprocess.env.SECREATE_TOKEN='hfufyufutruygyiugkhgyug'\nimport User from \"../models/user.model\";\nimport { registrationValidation, loginValidation } from \"../misc/validation\";\nimport bcrypt, { genSalt, hash } from \"bcryptjs\";\nimport { sign } from \"jsonwebtoken\";\nimport { generate } from \"randomstring\";\nimport { initMinIO } from \"../misc/minio\";\n\nconst minioBucket = \"image-storage\";\nconst projection = {\n  password: 0,\n\n  dateOfRegistration: 0,\n  contacts: 0,\n  blockedContacts: 0\n};\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description used to create new user account i.e singup new users\n * @example  'using this url' -> host:4000/api/user/register\n * and passing {\n *                  \"email\": <user-email> ,\n *                  \"password\":<user-password> ,\n *                  \"name\" :<user-name>,\n *                  \"profileImage\":<user-profileImage>\n *             }\n */\nexport async function register_user(req, res) {\n  //validate the user input\n  /**@constant error this is returned by the registerValidation */\n  const { error } = registrationValidation(req.body);\n  if (error) return res.send(error.details[0].message).status(422);\n\n  //check if the email already exists\n  const emailExists = await User.findOne({ email: req.body.email });\n  if (emailExists) return res.status(422).send(\"email already exists\");\n\n  //encrpte the password\n\n  const encrptedPass = await bcrypt.hash(req.body.password, 10);\n  //generate a random string\n  /**@constant */\n\n  const secreateToken = generate();\n  //flag the account as inactive\n  //create a new user\n\n  // try {\n    \n    if( req.file){\n      console.log(req.body)\n      const minio = await initMinIO();\n      await minio.putObject(\n        minioBucket,\n        req.file.originalname,\n        req.file.buffer\n      )\n      const image = `/uploads/${encodeURIComponent(req.file.originalname)}`\n      const user = new User({\n        name: req.body.name,\n        email: req.body.email,\n        password: encrptedPass,\n        profileImage: image\n      });\n      //save the user\n      await user.save();\n  \n      res\n        .status(200)\n        .send({ message: \"registration sucessfull\", token: secreateToken });\n    }\n\n  // } catch (error) {\n  //   //catch errors if any\n  //   res.status(400).send({ message: \"registration unsucessfull\", error });\n  // }\n}\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description used to authenticate and authorize  user credential's\n * @example  'using this url' -> host:4000/api/user/login\n * and passing {\n *                  \"email\": <user-email> ,\n *                  \"password\":<user-password>\n *             }\n */\nexport async function log_in_user(req, res) {\n  try {\n    //validate the user input\n    const { error } = loginValidation(req.body);\n    if (error) return res.send(error.details[0].message);\n    \n    //check if the email doesn't exists\n    const user = await User.findOne({ email: req.body.email });\n    if (!user)\n    return res.status(400).send(\"Error authenticating please try again !\");\n    \n    //check if password is correct\n    const validPass = await bcrypt.compare(req.body.password, user.password);\n    if (!validPass)\n    return res.status(422).send(\"Error authenticating please try again !\");\n    console.log(req.body)\n    \n    //check if account is active\n    // if (!user.active) return res.status(400).json({ message: 'Please activate your account first' });\n    //create and assing an authentification token\n    const token = sign({ _id: user._id }, process.env.SECREATE_TOKEN);\n    console.log('finished')\n    res\n      .header(\"AUTH_TOKEN\", token)\n      .send({ _id: user._id, token })\n      .status(200);\n  } catch (err) {\n    console.log(err);\n    res.status(408).json({ message: err });\n  }\n}\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description used to fetch a list of users profile information\n * @example  ' POST request using this url' -> host:4000/api/user/\n * and passing {\n *                  \"userIds\": [],\n *             }\n *\n */\nexport async function getUsers(req, res, next) {\n  try {\n    const users = await User.find(\n      { _id: { $in: req.body.userIds } },\n      { password: 0 }\n    );\n    if (!users) return res.json({ message: \" users not found\" }).status(404);\n    res.json({ users }).status(200);\n    next();\n  } catch (error) {\n    res.status(400).send(\"error getting users\");\n  }\n}\n\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description used to fetch a particular user's profile information\n * @example  ' GET request using this url' -> host:4000/api/user/:id\n *\n */\nexport async function getUser(req, res, next) {\n  try {\n    const singleUser = await User.findById({ _id: req.params.id });\n    if (!singleUser)\n      return res.json({ message: \" User not found\" }).status(404);\n    res.json({ singleUser }).status(200);\n    next();\n  } catch (error) {\n    res.status(400).send(\"error getting user\");\n  }\n}\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description used to modify/change user profile information\n * @example  'using this url' -> host:3000/api/user/\n * and passing {\n *                  \"password\": <new password>,\n *                  \"profileImage\": <new profileImage>\n *             }\n * the password or profile image are both optional and one or both can be sent in a particular request\n */\nexport async function changeUserProfile(req, res, next) {\n  try {\n    const { _id } = req.user;\n    if (req.body.password) {\n      //encrpte the password\n      const salt = await genSalt(10);\n      const encrptedPass = await hash(req.body.password, salt);\n      await User.updateOne({ _id: _id }, { $set: { password: encrptedPass } });\n    } else {\n      await User.updateOne(\n        { _id: _id },\n        { $set: { profileImage: req.file.path } }\n      );\n    }\n\n    const updatedProfile = await User.findOne(\n      { _id },\n      { password: 0 },\n      { ...projection }\n    );\n    res.json({ updatedProfile }).status(200);\n    next();\n  } catch (error) {\n    res.status(400).send(\"error while updating profile\");\n  }\n}\n/**\n *\n * @param {*} req incoming user request\n * @param {*} res server response\n * @param {*} next next middleware to be executed\n * @description forgotPass resets user's password and sends an email containing the new password\n * to the users email account\n * @example  'using this url' -> host:3000/api/user/forgotpass\n */\nexport async function forgotPass(req, res, next) {\n  try {\n    const { email } = req.body;\n    const secreateToken = generate(7);\n    //encrpte the password\n    const salt = await bcrypt.genSalt(10);\n    const encrptedPass = await bcrypt.hash(secreateToken, salt);\n    await User.updateOne(\n      { email: email },\n      { $set: { password: encrptedPass } }\n    );\n    const user = await User.findOne({ email: email });\n    //compose an email\n    const html = `\n        Hello ${user.name},<br/>\n        please enter the verification code below to acess your account\n        please enter the following token<br/>\n        Token:${secreateToken}<br/>\n        Have a nice day.\n        `;\n    //send the email\n    //    await sendemail(process.env.User,req.body.email,'Password Reset Request',html)\n    res\n      .json({\n        message: \"password changed successfully please check your email\",\n        secreateToken: secreateToken\n      })\n      .status(200);\n  } catch (error) {\n    res.status(400).send(\"error while updating profile\");\n  }\n}\n/**\n * @description used to search for new friends\n * @param {Request} req incoming user request\n * @param {Response} res server response\n * @example  'using this url' -> host:4000/api/user/friends\n *  and passing {\n *                  \"name\"?: <user-name>,\n *                  \"email\"?:<user-email>\n *             }\n */\nexport async function searchFriends(req, res) {\n  try {\n    const { name, email } = req.body;\n    if (name) {\n      //look for users with that name and return them to the user\n      const users = await User.find({ name }, { ...projection });\n      res.json({ result: users }).status(200);\n    } else {\n      //if name is not provided then we use the email to fetch the particular user\n      const users = await User.find({ email }, { ...projection });\n      res.json({ result: users }).status(200);\n    }\n  } catch (error) {\n    res.status(400).send(\"error while extracting users\");\n  }\n}\n/**\n * @description used to add contact\n * @param {Request} req incoming user request\n * @param {Response} res server response\n * @example  'using this url' -> host:4000/api/user/friends/:id\n */\nexport async function addContact(req, res) {\n  try {\n    //extract a temporary list of user contact\n    const { _id } = req.user;\n    await updateUserContact(_id, req.body.userId);\n    //update other user contacts\n    await updateUserContact(req.body.userId, _id);\n    const userDetails = await User.findById({ _id: _id }, { ...projection });\n    res.json(userDetails).status(200);\n  } catch (error) {\n    res.status(400).send({ message: \"error while updating contacts\" });\n  }\n  async function updateUserContact(_id, userId) {\n    if (_id === userId) throw Error(\"invalid operation\");\n    const user = await User.findById({ _id: _id }, { ...projection });\n    const { contacts } = user;\n\n    //add the new contact into the list\n    const newContact = [...contacts, userId];\n    //get unique array\n    const uniqueContacts = Array.from(new Set(newContact));\n    //update the user contact\n    await User.updateOne({ _id: _id }, { $set: { contacts: uniqueContacts } });\n  }\n}\n\n/**\n * @description used to block unwanted users from sending text's to the user\n * @param {Request} req incoming user request\n * @param {Response} res server response\n * @example  'using this url' -> host:4000/api/user/contacts/:id\n */\nexport async function blockContact(req, res) {\n  try {\n    const { _id } = req.user;\n    const { userId } = req.body;\n    if (_id === userId) throw Error(\"invalid operation\");\n    const user = await User.findById({ _id: _id });\n    //extract a temporary list of user contact\n    const { blockedContacts } = user;\n    //add the new contact into the list\n    const newContact = [...blockedContacts, userId];\n    //get unique array\n    const uniqueContacts = Array.from(new Set(newContact));\n    //update the user contact\n    await User.updateOne(\n      { _id: _id },\n      { $set: { blockedContacts: uniqueContacts } }\n    );\n  } catch (error) {\n    res.status(400).send({ message: \"error while updating contacts\" });\n  }\n}\n"],"file":"auth.controller.js"}