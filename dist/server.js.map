{"version":3,"sources":["../src/server.js"],"names":["server","Http","Server","app","dotenv","config","path","MONGODB_URL","process","env","CONNECTION_STRING","Port","PORT","REDIS_PORT","client","useNewUrlParser","useUnifiedTopology","connection","once","console","log","on","error","listen","io","socket","data","_id","setex","id","chatId","token","get","err","socketId","chat","to","emit","getSocketIdAndExecuteEvent","newChats","cb"],"mappings":"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","sourcesContent":["/**\n * @fileOverview this is the main file and serves as the root entry point of the application\n * @author brian omondi\n * @version 0.0.1\n */\n\nimport { connect, connection } from \"mongoose\";\nimport * as dotenv from \"dotenv\";\nimport Http from \"http\";\nimport socketIo from \"socket.io\";\nimport app from \"./app\";\nconst server = Http.Server(app);\n\n// load env vars\n\ndotenv.config({ path: \"config/config.env\" });\n\nimport { createClient } from \"redis\";\nimport { getUserChats, getsingleChat } from \"./misc/chatsDao\";\n\nconst MONGODB_URL =\n  process.env.CONNECTION_STRING || \"mongodb://localhost/snapshare\";\nconst Port = process.env.PORT || 4000;\nconst REDIS_PORT = process.env.PORT || 6379;\n\n//setup the redis client\nconst client = createClient(REDIS_PORT);\n\n// express.response.setHeader('X-Powered-By', 'snapShare');\n//conect mongoDb\nconnect(MONGODB_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nconnection\n  .once(\"open\", function() {\n    console.log(\" Database connection made sucessfull\");\n  })\n  .on(\"error\", function(error) {\n    console.log(\"connection error:\", error);\n  });\n\nserver.listen(Port, () => {\n  console.log(`server up and running on port ${Port}`);\n});\n\n//socket setup\nconst io = socketIo(server);\n\nio.on(\"connection\", socket => {\n  //fire 'online'event to notify all connected friends\n  socket.on(\"online\", data => {\n    const { _id } = data;\n    //add user to redis cache\n    client.setex(_id, 3600, socket.id);\n  });\n  // Fire 'send' event for updating Message list in UI\n  socket.on(\"message\", function(data) {\n    console.log(\"data\", data);\n    const { _id, chatId, token } = data;\n    try {\n      client.get(_id, async (err, socketId) => {\n        if (err) throw err;\n        if (socketId !== null) {\n          const chat = await getsingleChat(token, chatId);\n          console.log(`chatid = ${chatId} and its chat=${chat}`);\n          io.to(`${socketId}`).emit(\"incoming_message\", chat);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  });\n  // Fire 'typing' event for updating the UI\n  socket.on(\"typing\", function(data) {\n    const { _id } = data;\n    getSocketIdAndExecuteEvent(_id, socketId => {\n      io.to(`${socketId}`).emit(\"typed\");\n    });\n  });\n  //check for new unread messages , friend requests or accepted requests\n  socket.on(\"notifications\", async function(data) {\n    const { token, _id } = data;\n    try {\n      const newChats = await getUserChats(token);\n      getSocketIdAndExecuteEvent(_id, socketId => {\n        io.to(`${socketId}`).emit(\"newNotification\", newChats);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  });\n});\n\nfunction getSocketIdAndExecuteEvent(_id, cb, data) {\n  try {\n    client.get(_id, (err, socketId) => {\n      if (err) throw err;\n      if (socketId !== null) {\n        cb(socketId, data);\n      }\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n"],"file":"server.js"}