{"version":3,"sources":["../../src/middleware/verfyToken.middleware.js"],"names":["req","res","next","token","header","status","send","verifiedToken","process","env","SECREATE_TOKEN","user","error"],"mappings":";;;;;;;AAMA;;AANA;;;;;eAQe,kBAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,YAAX,CAAd;AACA,MAAI,CAACD,KAAL,EAAY,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB,CAAP;;AAEZ,MAAI;AACF,QAAMC,aAAa,GAAG,0BAAOJ,KAAP,EAAcK,OAAO,CAACC,GAAR,CAAYC,cAA1B,CAAtB;AACAV,IAAAA,GAAG,CAACW,IAAJ,GAAWJ,aAAX;AAEAL,IAAAA,IAAI;AACL,GALD,CAKE,OAAOU,KAAP,EAAc;AACdX,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;AACF,C","sourcesContent":["/**\n * @fileOverview contains all the custom middleware used in the application\n * @author Eucossa\n * @version 0.0.1\n */\n\nimport { verify } from \"jsonwebtoken\";\n\nexport default (req, res, next) => {\n  const token = req.header(\"AUTH_TOKEN\");\n  if (!token) return res.status(401).send(\"ACCESS DENIED\");\n\n  try {\n    const verifiedToken = verify(token, process.env.SECREATE_TOKEN);\n    req.user = verifiedToken;\n\n    next();\n  } catch (error) {\n    res.status(400).send(\"Invalid Token\");\n  }\n};\n"],"file":"verfyToken.middleware.js"}