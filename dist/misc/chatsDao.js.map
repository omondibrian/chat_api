{"version":3,"sources":["../../src/misc/chatsDao.js"],"names":["tokenVerifyer","token","verifiedToken","process","env","SECREATE_TOKEN","e","saveChat","chat","save","savedchat","TypeError","getsingleChat","chatId","isVarified","Promise","resolve","reject","Chat","find","_id","getUserChats","receipentId","chats","createChat","data","text","SenderId","imageUrl","newChat","deleteChat","findOneAndRemove","useFindAndModify"],"mappings":"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","sourcesContent":["/**\n * @fileOverview  the chatsDao contains the functions needed\n * to manege all database interactions\n * @author brian omondi\n * @version 0.0.1\n */\n\nimport Chat from \"../models/chats.models\";\nimport { verify } from \"jsonwebtoken\";\n\n// const chat = await getsingleChat(token,chatId)\n/**\n * @param {String} token user auth token\n * @private method of the class\n * @description use to varify the validity of the jwt passed\n * @returns {Boolean} either true if valid token or false if otherwise\n */\nconst tokenVerifyer = token => {\n  try {\n    const verifiedToken = verify(token, process.env.SECREATE_TOKEN);\n    if (verifiedToken) return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * @param {Document} chat chat document to be saved\n * @private method of the class\n * @description used to save the chat document into the collection\n */\nexport const saveChat = async chat => {\n  try {\n    //save the chat\n    const savedchat = await chat.save();\n    return savedchat;\n  } catch (error) {\n    //catch errors if any\n    throw new TypeError(\"error saving chat\");\n  }\n};\n/**\n * @param {String} token the user auth token used to check for authencity of the user\n * @param {String} chatId chat to be fetched\n * @public method of the class\n * @returns {Document}  an array of user chats\n * @throws  invalid token exeception\n * @description used to fetch single user chat from the chats collection\n *\n */\nexport const getsingleChat = (token, chatId) => {\n  const isVarified = tokenVerifyer(token);\n  if (!isVarified) {\n    throw new TypeError(\"invalid token\");\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chat = await Chat.find({ _id: chatId });\n      resolve(chat);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n/**\n * @public method\n * @param {String} token the user auth token used to check for authencity of the user\n * @returns {Document[]}  an array of user chats\n * @throws  invalid token exeception\n * @description used to retrive user chats\n */\nexport const getUserChats = token => {\n  const isVarified = tokenVerifyer(token);\n  if (!isVarified) {\n    throw new TypeError(\"invalid token\");\n  }\n  const { _id } = verify(token, process.env.SECREATE_TOKEN);\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chats = await Chat.find({ receipentId: _id });\n      resolve(chats);\n    } catch (err) {\n      reject(new TypeError(\"error while processing your chats\"));\n    }\n  });\n};\n/**\n * @public method\n * @param {String} token the user auth token used to check for authencity of the user\n * @param {*} data the payload received from the user\n * @returns {Document}  newly created user chat\n * @description create new user chats\n * @throws  invalid token exeception\n */\nexport const createChat = (token, data) => {\n  const { _id } = verify(token, process.env.SECREATE_TOKEN);\n  //check if token is valid\n  const isVarified = this.tokenVerifyer(token);\n  if (isVarified) {\n    throw new TypeError(\"invalid token\");\n  }\n  //if token is valid then the user message is saved in the persistance storage\n  return new Promise(async (resolve, reject) => {\n    try {\n      //create a new chat\n      const chat = new Chat({\n        text: data.text,\n        SenderId: _id,\n        receipentId: data.receipentId,\n        imageUrl: data.imageUrl || \"\"\n      });\n      const newChat = await this.saveChat(chat);\n      resolve(newChat);\n    } catch (error) {\n      reject(new TypeError(\"error while creating your message\"));\n    }\n  });\n};\n/**\n * @public method\n * @param {String} token the user auth token used to check for authencity of the user\n * @param {String} chatId chat id to be deleted\n * @returns {String}  newly created user chat\n * @description deleted specific user chat\n * @throws  invalid token exeception\n */\nexport const deleteChat = (token, chatId) => {\n  //check if token is valid\n  const isVarified = this.tokenVerifyer(token);\n  if (isVarified) {\n    throw new TypeError(\"invalid token\");\n  }\n  //return delete the chat from persistance storage\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { _id } = await Chat.findOneAndRemove(\n        { _id: chatId },\n        { useFindAndModify: false }\n      );\n      resolve({ _id });\n    } catch (error) {\n      reject(new TypeError(\"error while removing chat \"));\n    }\n  });\n};\n"],"file":"chatsDao.js"}